-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity debouncer is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    btn_in : IN STD_LOGIC_VECTOR (0 downto 0);
    btn_out : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of debouncer is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "debouncer_debouncer,hls_ip_2023_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.302600,HLS_SYN_LAT=0,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=69,HLS_SYN_LUT=302,HLS_VERSION=2023_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv64_7A120 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000001111010000100100000";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv64_FFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111111111111";

    signal state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal next_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal counter : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ap_phi_mux_next_counter_1_phi_fu_64_p10 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal state_load_load_fu_101_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal next_counter_fu_161_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln48_fu_129_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_out_tmp_phi_fu_83_p10 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln62_fu_105_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln52_fu_147_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln40_fu_174_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_sig_allocacmp_next_state_load : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln48_fu_123_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_fu_135_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln52_fu_141_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    next_state_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                if ((state_load_load_fu_101_p1 = ap_const_lv2_0)) then 
                    next_state <= zext_ln40_fu_174_p1;
                elsif (((ap_const_lv1_1 = and_ln48_fu_129_p2) and (state_load_load_fu_101_p1 = ap_const_lv2_1))) then 
                    next_state <= ap_const_lv2_1;
                elsif (((ap_const_lv1_0 = and_ln48_fu_129_p2) and (state_load_load_fu_101_p1 = ap_const_lv2_1))) then 
                    next_state <= select_ln52_fu_147_p3;
                elsif ((state_load_load_fu_101_p1 = ap_const_lv2_2)) then 
                    next_state <= select_ln62_fu_105_p3;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                counter <= ap_phi_mux_next_counter_1_phi_fu_64_p10;
                state <= ap_sig_allocacmp_next_state_load;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    and_ln48_fu_129_p2 <= (icmp_ln48_fu_123_p2 and btn_in);
    and_ln52_fu_141_p2 <= (icmp_ln52_fu_135_p2 and btn_in);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_ST_fsm_state1_blk <= ap_const_logic_0;

    ap_phi_mux_next_counter_1_phi_fu_64_p10_assign_proc : process(ap_CS_fsm_state1, state_load_load_fu_101_p1, next_counter_fu_161_p2, and_ln48_fu_129_p2)
    begin
        if (((ap_const_lv1_1 = and_ln48_fu_129_p2) and (state_load_load_fu_101_p1 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_phi_mux_next_counter_1_phi_fu_64_p10 <= next_counter_fu_161_p2;
        elsif ((((state_load_load_fu_101_p1 = ap_const_lv2_3) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((state_load_load_fu_101_p1 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_phi_mux_next_counter_1_phi_fu_64_p10 <= ap_const_lv64_7A120;
        elsif ((((ap_const_lv1_0 = and_ln48_fu_129_p2) and (state_load_load_fu_101_p1 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((state_load_load_fu_101_p1 = ap_const_lv2_2) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_phi_mux_next_counter_1_phi_fu_64_p10 <= ap_const_lv64_0;
        else 
            ap_phi_mux_next_counter_1_phi_fu_64_p10 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    ap_phi_mux_out_tmp_phi_fu_83_p10_assign_proc : process(ap_CS_fsm_state1, state_load_load_fu_101_p1, and_ln48_fu_129_p2)
    begin
        if ((((state_load_load_fu_101_p1 = ap_const_lv2_3) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_lv1_0 = and_ln48_fu_129_p2) and (state_load_load_fu_101_p1 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_lv1_1 = and_ln48_fu_129_p2) and (state_load_load_fu_101_p1 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((state_load_load_fu_101_p1 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_phi_mux_out_tmp_phi_fu_83_p10 <= ap_const_lv1_0;
        elsif (((state_load_load_fu_101_p1 = ap_const_lv2_2) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_phi_mux_out_tmp_phi_fu_83_p10 <= ap_const_lv1_1;
        else 
            ap_phi_mux_out_tmp_phi_fu_83_p10 <= "X";
        end if; 
    end process;


    ap_sig_allocacmp_next_state_load_assign_proc : process(next_state, ap_CS_fsm_state1, state_load_load_fu_101_p1, and_ln48_fu_129_p2, select_ln62_fu_105_p3, select_ln52_fu_147_p3, zext_ln40_fu_174_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
            if ((state_load_load_fu_101_p1 = ap_const_lv2_0)) then 
                ap_sig_allocacmp_next_state_load <= zext_ln40_fu_174_p1;
            elsif (((ap_const_lv1_1 = and_ln48_fu_129_p2) and (state_load_load_fu_101_p1 = ap_const_lv2_1))) then 
                ap_sig_allocacmp_next_state_load <= ap_const_lv2_1;
            elsif (((ap_const_lv1_0 = and_ln48_fu_129_p2) and (state_load_load_fu_101_p1 = ap_const_lv2_1))) then 
                ap_sig_allocacmp_next_state_load <= select_ln52_fu_147_p3;
            elsif ((state_load_load_fu_101_p1 = ap_const_lv2_2)) then 
                ap_sig_allocacmp_next_state_load <= select_ln62_fu_105_p3;
            else 
                ap_sig_allocacmp_next_state_load <= next_state;
            end if;
        else 
            ap_sig_allocacmp_next_state_load <= next_state;
        end if; 
    end process;

    btn_out <= ap_phi_mux_out_tmp_phi_fu_83_p10;
    icmp_ln48_fu_123_p2 <= "0" when (counter = ap_const_lv64_0) else "1";
    icmp_ln52_fu_135_p2 <= "1" when (counter = ap_const_lv64_0) else "0";
    next_counter_fu_161_p2 <= std_logic_vector(unsigned(counter) + unsigned(ap_const_lv64_FFFFFFFFFFFFFFFF));
    select_ln52_fu_147_p3 <= 
        ap_const_lv2_2 when (and_ln52_fu_141_p2(0) = '1') else 
        ap_const_lv2_0;
    select_ln62_fu_105_p3 <= 
        ap_const_lv2_2 when (btn_in(0) = '1') else 
        ap_const_lv2_0;
    state_load_load_fu_101_p1 <= state;
    zext_ln40_fu_174_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(btn_in),2));
end behav;
